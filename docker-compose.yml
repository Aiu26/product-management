version: '3'
services:
  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_PASSWORD=postgres_password
    ports:
      - '5438:5432'
    restart: on-failure
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', "sh -c 'pg_isready -U postgres -d postgres'"]
      interval: 5s
      timeout: 10s
      retries: 3
  redis:
    image: redis:latest
    restart: on-failure
    volumes:
      - ./redis-data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 5s
      timeout: 10s
      retries: 3
  rabbitmq:
    hostname: rabbitmq
    image: rabbitmq:4.0-management
    volumes:
      - ./rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 5s
      timeout: 10s
      retries: 3
  products:
    build:
      dockerfile: ./products/Dockerfile
      context: ./
    environment:
      - HOST=:8000
      - DATABASE_NAME=postgres
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres_password
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - TZ=Asia/Kolkata
      - REDIS_HOST=redis:6379
      - RABBITMQ_HOST=amqp://rabbitmq:5672
      - RABBITMQ_QUEUE=products
    ports:
      - '8000:8000'
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  compression:
    build:
      dockerfile: ./compression/Dockerfile
      context: ./
    environment:
      - DATABASE_NAME=postgres
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres_password
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - TZ=Asia/Kolkata
      - REDIS_HOST=redis:6379
      - RABBITMQ_HOST=amqp://rabbitmq:5672
      - RABBITMQ_QUEUE=products
      - AWS_ACCESS_KEY_ID=
      - AWS_SECRET_ACCESS_KEY=
      - AWS_BUCKET_REGION=
      - S3_BUCKET_NAME=
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
